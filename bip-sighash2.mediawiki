<pre>
  BIP: YYY
  Layer: Consensus (soft fork)
  Title: Signature checking operations in version 1 witness program
  Author: Johnson Lau <jl2012@xbt.hk>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0YYY
  Status: Draft
  Type: Standards Track
  Created: 2017-07-19
  License: BSD-3-Clause
</pre>

==Abstract==
This BIP defines signature checking operations in version 1 witness program.

==Motivation==
Use of compact signatures to save space.

New function: NOINPUT

More robust hardware wallet: Signing scriptPubKey and witness size of the input, fees, value of all inputs,
==Specification==
The following specification is applicable to <code>OP_CHECKSIG</code> and <code>OP_CHECKSIGVERIFY</code> in version 1 witness program.

===Public Key Format===
To be defined in Taproot BIP

===Signature Format===
If the signature size is 64 or 65 byte, the first 64-byte MUST be a valid Schnorr signature or the script execution MUST fail (cf. BIP146 NULLFAIL)

The last byte of a 65-byte signature denotes the <code>hashtype</code> (<code>0x00</code> to <code>0xff</code>).

If the signature has 64 bytes, <code>hashtype</code> is assumed to be <code>0x00</code>.

If the signature size is zero, it is accepted as the "valid failing" signature for <code>OP_CHECKSIG</code> to return a FALSE value to the stack. (cf. BIP66)

The script execution MUST fail with a signature size not 0, 64, 65-byte.

===New hashtype definitions===
<code>hashtype</code> and the <code>SignatureHash</code> function are re-defined:

  Double SHA256 of the serialization of:
     1. nVersion (4-byte little endian)
     2. input_value_hash (32-byte hash)
     3. hashPrevouts (32-byte hash)
     4. hashSequence (32-byte hash)
     5. outpoint (32-byte hash + 4-byte little endian)
     6. scriptCode (serialized as scripts inside CTxOuts)
     7. txout_spent (8-byte little endian + script)
     8. nSequence (4-byte little endian)
     9. hashOutputs (32-byte hash)
    10. fees (8-byte little endian)
    11. witness_size (4-byte little endian)
    12. nLocktime (4-byte little endian)
    13. hashtype (4-byte little endian)
    14. sigtype (4-byte little endian for the constant 0x01000000)

The <code>hashtype</code>, masked with <code>0x03</code>, is <code>inputtype</code> determining the value of <code>hashPrevouts</code>, <code>inputs_value_hash</code>, and <code>outpoint</code>.
* If <code>inputtype</code> is <code>0x00</code>, <code>hashPrevouts</code> is the hash of all inputs (same as the non-<code>SIGHASH_ANYONECANPAY</code> case in BIP143). Otherwise, it is 32 <code>0x00</code> bytes.
* If <code>inputtype</code> is <code>0x00</code>, <code>inputs_value_hash</code> is the double SHA256 hash of all input value serialized. Otherwise, it is 32 <code>0x00</code> bytes.
* If <code>inputtype</code> is <code>0x02</code>, it is known as <code>SIGHASH2_NOINPUT</code> and <code>outpoint</code> is 36 <code>0x00</code> bytes. Otherwise, it is the <code>COutPoint</code> of the current input (same as BIP143).
* <code>inputtype</code> of <code>0x01</code> is known as <code>SIGHASH2_ONEINPUT</code>, same as the <code>SIGHASH_ANYONECANPAY</code> case in BIP143.
* <code>inputtype</code> of <code>0x03</code> is invalid and the script execution MUST fail.

The <code>hashtype</code>, masked with <code>0x1c</code>, is <code>outputtype</code> determining the value of <code>hashOutputs</code>.
* If <code>outputtype</code> is <code>0x00</code>, <code>hashOutputs</code> is the hash of all outputs, same as the <code>SIGHASH_ALL</code> case in BIP143.
* <code>outputtype</code> of <code>0x04</code> is known as <code>SIGHASH2_MATCHOUTPUT</code>. <code>hashOutputs</code> is same as the <code>SIGHASH_SINGLE</code> case in BIP143 as a hash of the matching output. If a matching output does not exist, the script execution MUST fail.
* <code>outputtype</code> of <code>0x08</code> is known as <code>SIGHASH2_LASTOUTPUT</code>. <code>hashOutputs</code> is the double SHA256 hash of the highest index output.
* <code>outputtype</code> of <code>0x0c</code> is known as <code>SIGHASH2_DUALOUTPUT</code>. <code>hashOutputs</code> is the double SHA256 hash of the matching output and last output serialized. If a matching output does not exist, or the matching output is the last output, the script execution MUST fail.
* <code>outputtype</code> of <code>0x10</code> is known as <code>SIGHASH2_NOOUTPUT</code>. <code>hashOutputs</code> is 32 <code>0x00</code> bytes, same as the <code>SIGHASH_NONE</code> case in BIP143.
* Any other <code>outputtype</code> values are invalid and the script execution MUST fail.

If both <code>inputtype</code> and <code>outputtype</code> are <code>0x00</code>, <code>hashSequence</code> is the hash of all <code>nSequence</code> (same as BIP143). Otherwise, it is 32 <code>0x00</code> bytes.

<code>scriptCode</code> is same as defined in BIP143.

<code>txout_spent</code> is the value of the previous output being spent (same as BIP143), followed by the <code>scriptPubKey</code> of the same previous output.

<code>nSequence</code> is the <code>nSequence</code> value of the current input (same as BIP143).

If bit 5 of <code>hashtype</code> is set (<code>SIGHASH2_NOFEES</code>), <code>fees</code> is <code>0x0000000000000000</code>. Otherwise, it is the fee paid by the transaction.

If bit 6 of <code>hashtype</code> is set (<code>SIGHASH2_NOWITNESSSIZE</code>), <code>witness_size</code> is <code>0x00000000</code>. Otherwise, it is the serialized size of the witness of the transaction input.

Bit 7 of <code>hashtype</code> is ignored, but the signature still commits to its value as <code>hashtype</code>.

<code>hashtype</code> of <code>0x00</code> is also known as <code>SIGHASH2_ALL</code>.

==Rationale==
===Signature Format===
The current DER format is a complete waste of block space. The new format saves ~8 bytes per signature.

===New hashtype definitions===
New mandatory features: signing all input values when all inputs are also signed; signing previous <code>scriptPubKey</code>; out-of-range SIGHASH2_MATCHOUTPUT is not allowed.

New optional features: NOINPUT, LASTOUTPUT, DUALOUTPUT, signing fees, signing witness size

The default and most commonly used case is <code>SIGHASH2_ALL</code>. One byte could be saved but it is optional. This is not a source of malleability because <code>SIGHASH2_ALL</code> commits to the witness size.

Signing <code>scriptPubKey</code> of previous output: so a hardware wallet knows whether it is P2SH-segwit or native-segwit. Also, <code>NOINPUT</code> signature cannot be reused for different <code>scriptPubKey</code>.

Signing the fees amount: Sometimes you don't sign all inputs / outputs but still want to make sure the fees amount is correct. It is optional as sometimes you don't know / care about the fees.

Signing the witness size: The witness size for most properly designed scripts are fixed and not malleable by a third party. This is not guaranteed for more complicated scripts. Committing to the witness size makes it impossible to bloat a transaction and reduce its fee rate. In multi-signature, the variable signature size might lead to some inconvenience. Always use 65-byte signatures if this is a concern. If some parties could not estimate the witness size beforehand, this responsibility could be left to the last signing party.

Reserved bits: These bits are ignored but should normally be unset. Users MUST NOT set these bits until they are defined by a future proposal, or they might lose money.

Why <code>sigtype</code>? Make sure the message digest won't collide with SIGHASH schemes in the past (legacy and BIP143) and future (which will use a different <code>sigtype</code>).

== Backward compatibility ==
This is a soft-fork.

== Deployment ==
Exact details TBD.

== Reference Implementation ==
https://github.com/jl2012/bitcoin/commits/sighash2


== Copyright ==
This document is licensed as BSD 3-clause.
